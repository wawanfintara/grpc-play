// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package localservices

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LocalServicesClient is the client API for LocalServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocalServicesClient interface {
	// Product
	GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error)
	GetProductDetail(ctx context.Context, in *GetProductDetailRequest, opts ...grpc.CallOption) (*GetProductDetailResponse, error)
	GetProductPrice(ctx context.Context, in *GetProductPriceRequest, opts ...grpc.CallOption) (*GetProductPriceResponse, error)
	// Category
	GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*Categories, error)
	GetCategoryMaps(ctx context.Context, in *GetCategoryMapsRequest, opts ...grpc.CallOption) (*GetCategoryMapsResponse, error)
	GetCategoryMapByID(ctx context.Context, in *GetCategoryMapByIdRequest, opts ...grpc.CallOption) (*GetCategoryMapByIdResponse, error)
	CreateCategoryMap(ctx context.Context, in *CreateCategoryMapRequest, opts ...grpc.CallOption) (*CreateCategoryMapResponse, error)
	UpdateCategoryMap(ctx context.Context, in *UpdateCategoryMapRequest, opts ...grpc.CallOption) (*UpdateCategoryMapResponse, error)
	DeleteCategoryMap(ctx context.Context, in *DeleteCategoryMapRequest, opts ...grpc.CallOption) (*DeleteCategoryMapResponse, error)
	// Order
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error)
	// ProductSpecSet
	GetProductSpecSets(ctx context.Context, in *GetProductSpecSetsRequest, opts ...grpc.CallOption) (*GetProductSpecSetsResponse, error)
	GetProductSpecSetByID(ctx context.Context, in *GetProductSpecSetByIdRequest, opts ...grpc.CallOption) (*GetProductSpecSetByIdResponse, error)
	CreateProductSpecSet(ctx context.Context, in *CreateProductSpecSetRequest, opts ...grpc.CallOption) (*CreateProductSpecSetResponse, error)
	UpdateProductSpecSet(ctx context.Context, in *UpdateProductSpecSetRequest, opts ...grpc.CallOption) (*UpdateProductSpecSetResponse, error)
	DeleteProductSpecSet(ctx context.Context, in *DeleteProductSpecSetRequest, opts ...grpc.CallOption) (*DeleteProductSpecSetResponse, error)
	// ProductSpecSetMap
	GetProductSpecSetMaps(ctx context.Context, in *GetProductSpecSetMapsRequest, opts ...grpc.CallOption) (*GetProductSpecSetMapsResponse, error)
	GetProductSpecSetMapByID(ctx context.Context, in *GetProductSpecSetMapByIdRequest, opts ...grpc.CallOption) (*GetProductSpecSetMapByIdResponse, error)
	CreateProductSpecSetMap(ctx context.Context, in *CreateProductSpecSetMapRequest, opts ...grpc.CallOption) (*CreateProductSpecSetMapResponse, error)
	UpdateProductSpecSetMap(ctx context.Context, in *UpdateProductSpecSetMapRequest, opts ...grpc.CallOption) (*UpdateProductSpecSetMapResponse, error)
	DeleteProductSpecSetMap(ctx context.Context, in *DeleteProductSpecSetMapRequest, opts ...grpc.CallOption) (*DeleteProductSpecSetMapResponse, error)
	// ProductSpecValue
	GetProductSpecValues(ctx context.Context, in *GetProductSpecValuesRequest, opts ...grpc.CallOption) (*GetProductSpecValuesResponse, error)
	GetProductSpecValueByID(ctx context.Context, in *GetProductSpecValueByIdRequest, opts ...grpc.CallOption) (*GetProductSpecValueByIdResponse, error)
	CreateProductSpecValue(ctx context.Context, in *CreateProductSpecValueRequest, opts ...grpc.CallOption) (*CreateProductSpecValueResponse, error)
	UpdateProductSpecValue(ctx context.Context, in *UpdateProductSpecValueRequest, opts ...grpc.CallOption) (*UpdateProductSpecValueResponse, error)
	DeleteProductSpecValue(ctx context.Context, in *DeleteProductSpecValueRequest, opts ...grpc.CallOption) (*DeleteProductSpecValueResponse, error)
	// ProductSpecValueMap
	GetProductSpecValueMaps(ctx context.Context, in *GetProductSpecValueMapsRequest, opts ...grpc.CallOption) (*GetProductSpecValueMapsResponse, error)
	GetProductSpecValueMapByID(ctx context.Context, in *GetProductSpecValueMapByIdRequest, opts ...grpc.CallOption) (*GetProductSpecValueMapByIdResponse, error)
	CreateProductSpecValueMap(ctx context.Context, in *CreateProductSpecValueMapRequest, opts ...grpc.CallOption) (*CreateProductSpecValueMapResponse, error)
	UpdateProductSpecValueMap(ctx context.Context, in *UpdateProductSpecValueMapRequest, opts ...grpc.CallOption) (*UpdateProductSpecValueMapResponse, error)
	DeleteProductSpecValueMap(ctx context.Context, in *DeleteProductSpecValueMapRequest, opts ...grpc.CallOption) (*DeleteProductSpecValueMapResponse, error)
	// Payment
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
	CreatePaymentDetail(ctx context.Context, in *CreatePaymentDetailRequest, opts ...grpc.CallOption) (*CreatePaymentDetailResponse, error)
	GetPaymentData(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error)
	GetPaymentDetail(ctx context.Context, in *GetPaymentDetailRequest, opts ...grpc.CallOption) (*GetPaymentDetailResponse, error)
	GetPaymentDetailByPayment(ctx context.Context, in *GetPaymentDetailRequest, opts ...grpc.CallOption) (*GetPaymentDetailsResponse, error)
	UpdatePaymentData(ctx context.Context, in *UpdatePaymentDataRequest, opts ...grpc.CallOption) (*UpdatePaymentDataResponse, error)
	UpdatePaymentDetail(ctx context.Context, in *UpdatePaymentDetailRequest, opts ...grpc.CallOption) (*UpdatePaymentDetailResponse, error)
	// TransactionFulfillment
	GetTxFulfillments(ctx context.Context, in *GetTxFulfillmentsRequest, opts ...grpc.CallOption) (*GetTxFulfillmentsResponse, error)
	GetTxFulfillmentById(ctx context.Context, in *GetTxFulfillmentByIdRequest, opts ...grpc.CallOption) (*GetTxFulfillmentByIdResponse, error)
	CreateTxFulfillment(ctx context.Context, in *CreateTxFulfillmentRequest, opts ...grpc.CallOption) (*CreateTxFulfillmentResponse, error)
	UpdateTxFulfillment(ctx context.Context, in *UpdateTxFulfillmentRequest, opts ...grpc.CallOption) (*UpdateTxFulfillmentResponse, error)
	// VendorSubprovinceCoverage
	GetVendorSubprovinceCoverages(ctx context.Context, in *GetVendorSubprovinceCoveragesRequest, opts ...grpc.CallOption) (*GetVendorSubprovinceCoveragesResponse, error)
	GetVendorSubprovinceCoverageByID(ctx context.Context, in *GetVendorSubprovinceCoverageByIdRequest, opts ...grpc.CallOption) (*GetVendorSubprovinceCoverageByIdResponse, error)
	CreateVendorSubprovinceCoverage(ctx context.Context, in *CreateVendorSubprovinceCoverageRequest, opts ...grpc.CallOption) (*CreateVendorSubprovinceCoverageResponse, error)
	UpdateVendorSubprovinceCoverage(ctx context.Context, in *UpdateVendorSubprovinceCoverageRequest, opts ...grpc.CallOption) (*UpdateVendorSubprovinceCoverageResponse, error)
}

type localServicesClient struct {
	cc *grpc.ClientConn
}

func NewLocalServicesClient(cc *grpc.ClientConn) LocalServicesClient {
	return &localServicesClient{cc}
}

func (c *localServicesClient) GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	out := new(GetProductsResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetProductDetail(ctx context.Context, in *GetProductDetailRequest, opts ...grpc.CallOption) (*GetProductDetailResponse, error) {
	out := new(GetProductDetailResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetProductDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetProductPrice(ctx context.Context, in *GetProductPriceRequest, opts ...grpc.CallOption) (*GetProductPriceResponse, error) {
	out := new(GetProductPriceResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetProductPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*Categories, error) {
	out := new(Categories)
	err := c.cc.Invoke(ctx, "/LocalServices/GetCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetCategoryMaps(ctx context.Context, in *GetCategoryMapsRequest, opts ...grpc.CallOption) (*GetCategoryMapsResponse, error) {
	out := new(GetCategoryMapsResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetCategoryMaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetCategoryMapByID(ctx context.Context, in *GetCategoryMapByIdRequest, opts ...grpc.CallOption) (*GetCategoryMapByIdResponse, error) {
	out := new(GetCategoryMapByIdResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetCategoryMapByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) CreateCategoryMap(ctx context.Context, in *CreateCategoryMapRequest, opts ...grpc.CallOption) (*CreateCategoryMapResponse, error) {
	out := new(CreateCategoryMapResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/CreateCategoryMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) UpdateCategoryMap(ctx context.Context, in *UpdateCategoryMapRequest, opts ...grpc.CallOption) (*UpdateCategoryMapResponse, error) {
	out := new(UpdateCategoryMapResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/UpdateCategoryMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) DeleteCategoryMap(ctx context.Context, in *DeleteCategoryMapRequest, opts ...grpc.CallOption) (*DeleteCategoryMapResponse, error) {
	out := new(DeleteCategoryMapResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/DeleteCategoryMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/LocalServices/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) UpdateOrder(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error) {
	out := new(UpdateOrderStatusResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetProductSpecSets(ctx context.Context, in *GetProductSpecSetsRequest, opts ...grpc.CallOption) (*GetProductSpecSetsResponse, error) {
	out := new(GetProductSpecSetsResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetProductSpecSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetProductSpecSetByID(ctx context.Context, in *GetProductSpecSetByIdRequest, opts ...grpc.CallOption) (*GetProductSpecSetByIdResponse, error) {
	out := new(GetProductSpecSetByIdResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetProductSpecSetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) CreateProductSpecSet(ctx context.Context, in *CreateProductSpecSetRequest, opts ...grpc.CallOption) (*CreateProductSpecSetResponse, error) {
	out := new(CreateProductSpecSetResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/CreateProductSpecSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) UpdateProductSpecSet(ctx context.Context, in *UpdateProductSpecSetRequest, opts ...grpc.CallOption) (*UpdateProductSpecSetResponse, error) {
	out := new(UpdateProductSpecSetResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/UpdateProductSpecSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) DeleteProductSpecSet(ctx context.Context, in *DeleteProductSpecSetRequest, opts ...grpc.CallOption) (*DeleteProductSpecSetResponse, error) {
	out := new(DeleteProductSpecSetResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/DeleteProductSpecSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetProductSpecSetMaps(ctx context.Context, in *GetProductSpecSetMapsRequest, opts ...grpc.CallOption) (*GetProductSpecSetMapsResponse, error) {
	out := new(GetProductSpecSetMapsResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetProductSpecSetMaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetProductSpecSetMapByID(ctx context.Context, in *GetProductSpecSetMapByIdRequest, opts ...grpc.CallOption) (*GetProductSpecSetMapByIdResponse, error) {
	out := new(GetProductSpecSetMapByIdResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetProductSpecSetMapByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) CreateProductSpecSetMap(ctx context.Context, in *CreateProductSpecSetMapRequest, opts ...grpc.CallOption) (*CreateProductSpecSetMapResponse, error) {
	out := new(CreateProductSpecSetMapResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/CreateProductSpecSetMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) UpdateProductSpecSetMap(ctx context.Context, in *UpdateProductSpecSetMapRequest, opts ...grpc.CallOption) (*UpdateProductSpecSetMapResponse, error) {
	out := new(UpdateProductSpecSetMapResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/UpdateProductSpecSetMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) DeleteProductSpecSetMap(ctx context.Context, in *DeleteProductSpecSetMapRequest, opts ...grpc.CallOption) (*DeleteProductSpecSetMapResponse, error) {
	out := new(DeleteProductSpecSetMapResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/DeleteProductSpecSetMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetProductSpecValues(ctx context.Context, in *GetProductSpecValuesRequest, opts ...grpc.CallOption) (*GetProductSpecValuesResponse, error) {
	out := new(GetProductSpecValuesResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetProductSpecValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetProductSpecValueByID(ctx context.Context, in *GetProductSpecValueByIdRequest, opts ...grpc.CallOption) (*GetProductSpecValueByIdResponse, error) {
	out := new(GetProductSpecValueByIdResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetProductSpecValueByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) CreateProductSpecValue(ctx context.Context, in *CreateProductSpecValueRequest, opts ...grpc.CallOption) (*CreateProductSpecValueResponse, error) {
	out := new(CreateProductSpecValueResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/CreateProductSpecValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) UpdateProductSpecValue(ctx context.Context, in *UpdateProductSpecValueRequest, opts ...grpc.CallOption) (*UpdateProductSpecValueResponse, error) {
	out := new(UpdateProductSpecValueResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/UpdateProductSpecValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) DeleteProductSpecValue(ctx context.Context, in *DeleteProductSpecValueRequest, opts ...grpc.CallOption) (*DeleteProductSpecValueResponse, error) {
	out := new(DeleteProductSpecValueResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/DeleteProductSpecValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetProductSpecValueMaps(ctx context.Context, in *GetProductSpecValueMapsRequest, opts ...grpc.CallOption) (*GetProductSpecValueMapsResponse, error) {
	out := new(GetProductSpecValueMapsResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetProductSpecValueMaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetProductSpecValueMapByID(ctx context.Context, in *GetProductSpecValueMapByIdRequest, opts ...grpc.CallOption) (*GetProductSpecValueMapByIdResponse, error) {
	out := new(GetProductSpecValueMapByIdResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetProductSpecValueMapByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) CreateProductSpecValueMap(ctx context.Context, in *CreateProductSpecValueMapRequest, opts ...grpc.CallOption) (*CreateProductSpecValueMapResponse, error) {
	out := new(CreateProductSpecValueMapResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/CreateProductSpecValueMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) UpdateProductSpecValueMap(ctx context.Context, in *UpdateProductSpecValueMapRequest, opts ...grpc.CallOption) (*UpdateProductSpecValueMapResponse, error) {
	out := new(UpdateProductSpecValueMapResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/UpdateProductSpecValueMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) DeleteProductSpecValueMap(ctx context.Context, in *DeleteProductSpecValueMapRequest, opts ...grpc.CallOption) (*DeleteProductSpecValueMapResponse, error) {
	out := new(DeleteProductSpecValueMapResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/DeleteProductSpecValueMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetTxFulfillments(ctx context.Context, in *GetTxFulfillmentsRequest, opts ...grpc.CallOption) (*GetTxFulfillmentsResponse, error) {
	out := new(GetTxFulfillmentsResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetTxFulfillments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetTxFulfillmentById(ctx context.Context, in *GetTxFulfillmentByIdRequest, opts ...grpc.CallOption) (*GetTxFulfillmentByIdResponse, error) {
	out := new(GetTxFulfillmentByIdResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetTxFulfillmentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) CreateTxFulfillment(ctx context.Context, in *CreateTxFulfillmentRequest, opts ...grpc.CallOption) (*CreateTxFulfillmentResponse, error) {
	out := new(CreateTxFulfillmentResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/CreateTxFulfillment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) UpdateTxFulfillment(ctx context.Context, in *UpdateTxFulfillmentRequest, opts ...grpc.CallOption) (*UpdateTxFulfillmentResponse, error) {
	out := new(UpdateTxFulfillmentResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/UpdateTxFulfillment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetVendorSubprovinceCoverages(ctx context.Context, in *GetVendorSubprovinceCoveragesRequest, opts ...grpc.CallOption) (*GetVendorSubprovinceCoveragesResponse, error) {
	out := new(GetVendorSubprovinceCoveragesResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetVendorSubprovinceCoverages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetVendorSubprovinceCoverageByID(ctx context.Context, in *GetVendorSubprovinceCoverageByIdRequest, opts ...grpc.CallOption) (*GetVendorSubprovinceCoverageByIdResponse, error) {
	out := new(GetVendorSubprovinceCoverageByIdResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/GetVendorSubprovinceCoverageByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) CreateVendorSubprovinceCoverage(ctx context.Context, in *CreateVendorSubprovinceCoverageRequest, opts ...grpc.CallOption) (*CreateVendorSubprovinceCoverageResponse, error) {
	out := new(CreateVendorSubprovinceCoverageResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/CreateVendorSubprovinceCoverage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) UpdateVendorSubprovinceCoverage(ctx context.Context, in *UpdateVendorSubprovinceCoverageRequest, opts ...grpc.CallOption) (*UpdateVendorSubprovinceCoverageResponse, error) {
	out := new(UpdateVendorSubprovinceCoverageResponse)
	err := c.cc.Invoke(ctx, "/LocalServices/UpdateVendorSubprovinceCoverage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalServicesServer is the server API for LocalServices service.
type LocalServicesServer interface {
	// Product
	GetProducts(context.Context, *GetProductsRequest) (*GetProductsResponse, error)
	GetProductDetail(context.Context, *GetProductDetailRequest) (*GetProductDetailResponse, error)
	GetProductPrice(context.Context, *GetProductPriceRequest) (*GetProductPriceResponse, error)
	// Category
	GetCategories(context.Context, *GetCategoriesRequest) (*Categories, error)
	GetCategoryMaps(context.Context, *GetCategoryMapsRequest) (*GetCategoryMapsResponse, error)
	GetCategoryMapByID(context.Context, *GetCategoryMapByIdRequest) (*GetCategoryMapByIdResponse, error)
	CreateCategoryMap(context.Context, *CreateCategoryMapRequest) (*CreateCategoryMapResponse, error)
	UpdateCategoryMap(context.Context, *UpdateCategoryMapRequest) (*UpdateCategoryMapResponse, error)
	DeleteCategoryMap(context.Context, *DeleteCategoryMapRequest) (*DeleteCategoryMapResponse, error)
	// Order
	GetOrder(context.Context, *GetOrderRequest) (*Order, error)
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	UpdateOrder(context.Context, *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error)
	// ProductSpecSet
	GetProductSpecSets(context.Context, *GetProductSpecSetsRequest) (*GetProductSpecSetsResponse, error)
	GetProductSpecSetByID(context.Context, *GetProductSpecSetByIdRequest) (*GetProductSpecSetByIdResponse, error)
	CreateProductSpecSet(context.Context, *CreateProductSpecSetRequest) (*CreateProductSpecSetResponse, error)
	UpdateProductSpecSet(context.Context, *UpdateProductSpecSetRequest) (*UpdateProductSpecSetResponse, error)
	DeleteProductSpecSet(context.Context, *DeleteProductSpecSetRequest) (*DeleteProductSpecSetResponse, error)
	// ProductSpecSetMap
	GetProductSpecSetMaps(context.Context, *GetProductSpecSetMapsRequest) (*GetProductSpecSetMapsResponse, error)
	GetProductSpecSetMapByID(context.Context, *GetProductSpecSetMapByIdRequest) (*GetProductSpecSetMapByIdResponse, error)
	CreateProductSpecSetMap(context.Context, *CreateProductSpecSetMapRequest) (*CreateProductSpecSetMapResponse, error)
	UpdateProductSpecSetMap(context.Context, *UpdateProductSpecSetMapRequest) (*UpdateProductSpecSetMapResponse, error)
	DeleteProductSpecSetMap(context.Context, *DeleteProductSpecSetMapRequest) (*DeleteProductSpecSetMapResponse, error)
	// ProductSpecValue
	GetProductSpecValues(context.Context, *GetProductSpecValuesRequest) (*GetProductSpecValuesResponse, error)
	GetProductSpecValueByID(context.Context, *GetProductSpecValueByIdRequest) (*GetProductSpecValueByIdResponse, error)
	CreateProductSpecValue(context.Context, *CreateProductSpecValueRequest) (*CreateProductSpecValueResponse, error)
	UpdateProductSpecValue(context.Context, *UpdateProductSpecValueRequest) (*UpdateProductSpecValueResponse, error)
	DeleteProductSpecValue(context.Context, *DeleteProductSpecValueRequest) (*DeleteProductSpecValueResponse, error)
	// ProductSpecValueMap
	GetProductSpecValueMaps(context.Context, *GetProductSpecValueMapsRequest) (*GetProductSpecValueMapsResponse, error)
	GetProductSpecValueMapByID(context.Context, *GetProductSpecValueMapByIdRequest) (*GetProductSpecValueMapByIdResponse, error)
	CreateProductSpecValueMap(context.Context, *CreateProductSpecValueMapRequest) (*CreateProductSpecValueMapResponse, error)
	UpdateProductSpecValueMap(context.Context, *UpdateProductSpecValueMapRequest) (*UpdateProductSpecValueMapResponse, error)
	DeleteProductSpecValueMap(context.Context, *DeleteProductSpecValueMapRequest) (*DeleteProductSpecValueMapResponse, error)
	// Payment
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error)
	CreatePaymentDetail(context.Context, *CreatePaymentDetailRequest) (*CreatePaymentDetailResponse, error)
	GetPaymentData(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error)
	GetPaymentDetail(context.Context, *GetPaymentDetailRequest) (*GetPaymentDetailResponse, error)
	GetPaymentDetailByPayment(context.Context, *GetPaymentDetailRequest) (*GetPaymentDetailsResponse, error)
	UpdatePaymentData(context.Context, *UpdatePaymentDataRequest) (*UpdatePaymentDataResponse, error)
	UpdatePaymentDetail(context.Context, *UpdatePaymentDetailRequest) (*UpdatePaymentDetailResponse, error)
	// TransactionFulfillment
	GetTxFulfillments(context.Context, *GetTxFulfillmentsRequest) (*GetTxFulfillmentsResponse, error)
	GetTxFulfillmentById(context.Context, *GetTxFulfillmentByIdRequest) (*GetTxFulfillmentByIdResponse, error)
	CreateTxFulfillment(context.Context, *CreateTxFulfillmentRequest) (*CreateTxFulfillmentResponse, error)
	UpdateTxFulfillment(context.Context, *UpdateTxFulfillmentRequest) (*UpdateTxFulfillmentResponse, error)
	// VendorSubprovinceCoverage
	GetVendorSubprovinceCoverages(context.Context, *GetVendorSubprovinceCoveragesRequest) (*GetVendorSubprovinceCoveragesResponse, error)
	GetVendorSubprovinceCoverageByID(context.Context, *GetVendorSubprovinceCoverageByIdRequest) (*GetVendorSubprovinceCoverageByIdResponse, error)
	CreateVendorSubprovinceCoverage(context.Context, *CreateVendorSubprovinceCoverageRequest) (*CreateVendorSubprovinceCoverageResponse, error)
	UpdateVendorSubprovinceCoverage(context.Context, *UpdateVendorSubprovinceCoverageRequest) (*UpdateVendorSubprovinceCoverageResponse, error)
}

func RegisterLocalServicesServer(s *grpc.Server, srv LocalServicesServer) {
	s.RegisterService(&_LocalServices_serviceDesc, srv)
}

func _LocalServices_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetProducts(ctx, req.(*GetProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetProductDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetProductDetail(ctx, req.(*GetProductDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetProductPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetProductPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetProductPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetProductPrice(ctx, req.(*GetProductPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetCategories(ctx, req.(*GetCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetCategoryMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryMapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetCategoryMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetCategoryMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetCategoryMaps(ctx, req.(*GetCategoryMapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetCategoryMapByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryMapByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetCategoryMapByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetCategoryMapByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetCategoryMapByID(ctx, req.(*GetCategoryMapByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_CreateCategoryMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).CreateCategoryMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/CreateCategoryMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).CreateCategoryMap(ctx, req.(*CreateCategoryMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_UpdateCategoryMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).UpdateCategoryMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/UpdateCategoryMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).UpdateCategoryMap(ctx, req.(*UpdateCategoryMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_DeleteCategoryMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).DeleteCategoryMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/DeleteCategoryMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).DeleteCategoryMap(ctx, req.(*DeleteCategoryMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).UpdateOrder(ctx, req.(*UpdateOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetProductSpecSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductSpecSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetProductSpecSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetProductSpecSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetProductSpecSets(ctx, req.(*GetProductSpecSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetProductSpecSetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductSpecSetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetProductSpecSetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetProductSpecSetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetProductSpecSetByID(ctx, req.(*GetProductSpecSetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_CreateProductSpecSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductSpecSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).CreateProductSpecSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/CreateProductSpecSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).CreateProductSpecSet(ctx, req.(*CreateProductSpecSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_UpdateProductSpecSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductSpecSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).UpdateProductSpecSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/UpdateProductSpecSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).UpdateProductSpecSet(ctx, req.(*UpdateProductSpecSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_DeleteProductSpecSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductSpecSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).DeleteProductSpecSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/DeleteProductSpecSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).DeleteProductSpecSet(ctx, req.(*DeleteProductSpecSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetProductSpecSetMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductSpecSetMapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetProductSpecSetMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetProductSpecSetMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetProductSpecSetMaps(ctx, req.(*GetProductSpecSetMapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetProductSpecSetMapByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductSpecSetMapByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetProductSpecSetMapByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetProductSpecSetMapByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetProductSpecSetMapByID(ctx, req.(*GetProductSpecSetMapByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_CreateProductSpecSetMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductSpecSetMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).CreateProductSpecSetMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/CreateProductSpecSetMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).CreateProductSpecSetMap(ctx, req.(*CreateProductSpecSetMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_UpdateProductSpecSetMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductSpecSetMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).UpdateProductSpecSetMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/UpdateProductSpecSetMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).UpdateProductSpecSetMap(ctx, req.(*UpdateProductSpecSetMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_DeleteProductSpecSetMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductSpecSetMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).DeleteProductSpecSetMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/DeleteProductSpecSetMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).DeleteProductSpecSetMap(ctx, req.(*DeleteProductSpecSetMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetProductSpecValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductSpecValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetProductSpecValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetProductSpecValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetProductSpecValues(ctx, req.(*GetProductSpecValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetProductSpecValueByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductSpecValueByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetProductSpecValueByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetProductSpecValueByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetProductSpecValueByID(ctx, req.(*GetProductSpecValueByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_CreateProductSpecValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductSpecValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).CreateProductSpecValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/CreateProductSpecValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).CreateProductSpecValue(ctx, req.(*CreateProductSpecValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_UpdateProductSpecValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductSpecValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).UpdateProductSpecValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/UpdateProductSpecValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).UpdateProductSpecValue(ctx, req.(*UpdateProductSpecValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_DeleteProductSpecValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductSpecValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).DeleteProductSpecValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/DeleteProductSpecValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).DeleteProductSpecValue(ctx, req.(*DeleteProductSpecValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetProductSpecValueMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductSpecValueMapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetProductSpecValueMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetProductSpecValueMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetProductSpecValueMaps(ctx, req.(*GetProductSpecValueMapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetProductSpecValueMapByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductSpecValueMapByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetProductSpecValueMapByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetProductSpecValueMapByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetProductSpecValueMapByID(ctx, req.(*GetProductSpecValueMapByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_CreateProductSpecValueMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductSpecValueMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).CreateProductSpecValueMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/CreateProductSpecValueMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).CreateProductSpecValueMap(ctx, req.(*CreateProductSpecValueMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_UpdateProductSpecValueMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductSpecValueMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).UpdateProductSpecValueMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/UpdateProductSpecValueMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).UpdateProductSpecValueMap(ctx, req.(*UpdateProductSpecValueMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_DeleteProductSpecValueMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductSpecValueMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).DeleteProductSpecValueMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/DeleteProductSpecValueMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).DeleteProductSpecValueMap(ctx, req.(*DeleteProductSpecValueMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetTxFulfillments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxFulfillmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetTxFulfillments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetTxFulfillments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetTxFulfillments(ctx, req.(*GetTxFulfillmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetTxFulfillmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxFulfillmentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetTxFulfillmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetTxFulfillmentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetTxFulfillmentById(ctx, req.(*GetTxFulfillmentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_CreateTxFulfillment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTxFulfillmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).CreateTxFulfillment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/CreateTxFulfillment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).CreateTxFulfillment(ctx, req.(*CreateTxFulfillmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_UpdateTxFulfillment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTxFulfillmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).UpdateTxFulfillment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/UpdateTxFulfillment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).UpdateTxFulfillment(ctx, req.(*UpdateTxFulfillmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetVendorSubprovinceCoverages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorSubprovinceCoveragesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetVendorSubprovinceCoverages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetVendorSubprovinceCoverages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetVendorSubprovinceCoverages(ctx, req.(*GetVendorSubprovinceCoveragesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetVendorSubprovinceCoverageByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorSubprovinceCoverageByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetVendorSubprovinceCoverageByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/GetVendorSubprovinceCoverageByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetVendorSubprovinceCoverageByID(ctx, req.(*GetVendorSubprovinceCoverageByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_CreateVendorSubprovinceCoverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVendorSubprovinceCoverageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).CreateVendorSubprovinceCoverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/CreateVendorSubprovinceCoverage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).CreateVendorSubprovinceCoverage(ctx, req.(*CreateVendorSubprovinceCoverageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_UpdateVendorSubprovinceCoverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVendorSubprovinceCoverageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).UpdateVendorSubprovinceCoverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalServices/UpdateVendorSubprovinceCoverage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).UpdateVendorSubprovinceCoverage(ctx, req.(*UpdateVendorSubprovinceCoverageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocalServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LocalServices",
	HandlerType: (*LocalServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProducts",
			Handler:    _LocalServices_GetProducts_Handler,
		},
		{
			MethodName: "GetProductDetail",
			Handler:    _LocalServices_GetProductDetail_Handler,
		},
		{
			MethodName: "GetProductPrice",
			Handler:    _LocalServices_GetProductPrice_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _LocalServices_GetCategories_Handler,
		},
		{
			MethodName: "GetCategoryMaps",
			Handler:    _LocalServices_GetCategoryMaps_Handler,
		},
		{
			MethodName: "GetCategoryMapByID",
			Handler:    _LocalServices_GetCategoryMapByID_Handler,
		},
		{
			MethodName: "CreateCategoryMap",
			Handler:    _LocalServices_CreateCategoryMap_Handler,
		},
		{
			MethodName: "UpdateCategoryMap",
			Handler:    _LocalServices_UpdateCategoryMap_Handler,
		},
		{
			MethodName: "DeleteCategoryMap",
			Handler:    _LocalServices_DeleteCategoryMap_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _LocalServices_GetOrder_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _LocalServices_CreateOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _LocalServices_UpdateOrder_Handler,
		},
		{
			MethodName: "GetProductSpecSets",
			Handler:    _LocalServices_GetProductSpecSets_Handler,
		},
		{
			MethodName: "GetProductSpecSetByID",
			Handler:    _LocalServices_GetProductSpecSetByID_Handler,
		},
		{
			MethodName: "CreateProductSpecSet",
			Handler:    _LocalServices_CreateProductSpecSet_Handler,
		},
		{
			MethodName: "UpdateProductSpecSet",
			Handler:    _LocalServices_UpdateProductSpecSet_Handler,
		},
		{
			MethodName: "DeleteProductSpecSet",
			Handler:    _LocalServices_DeleteProductSpecSet_Handler,
		},
		{
			MethodName: "GetProductSpecSetMaps",
			Handler:    _LocalServices_GetProductSpecSetMaps_Handler,
		},
		{
			MethodName: "GetProductSpecSetMapByID",
			Handler:    _LocalServices_GetProductSpecSetMapByID_Handler,
		},
		{
			MethodName: "CreateProductSpecSetMap",
			Handler:    _LocalServices_CreateProductSpecSetMap_Handler,
		},
		{
			MethodName: "UpdateProductSpecSetMap",
			Handler:    _LocalServices_UpdateProductSpecSetMap_Handler,
		},
		{
			MethodName: "DeleteProductSpecSetMap",
			Handler:    _LocalServices_DeleteProductSpecSetMap_Handler,
		},
		{
			MethodName: "GetProductSpecValues",
			Handler:    _LocalServices_GetProductSpecValues_Handler,
		},
		{
			MethodName: "GetProductSpecValueByID",
			Handler:    _LocalServices_GetProductSpecValueByID_Handler,
		},
		{
			MethodName: "CreateProductSpecValue",
			Handler:    _LocalServices_CreateProductSpecValue_Handler,
		},
		{
			MethodName: "UpdateProductSpecValue",
			Handler:    _LocalServices_UpdateProductSpecValue_Handler,
		},
		{
			MethodName: "DeleteProductSpecValue",
			Handler:    _LocalServices_DeleteProductSpecValue_Handler,
		},
		{
			MethodName: "GetProductSpecValueMaps",
			Handler:    _LocalServices_GetProductSpecValueMaps_Handler,
		},
		{
			MethodName: "GetProductSpecValueMapByID",
			Handler:    _LocalServices_GetProductSpecValueMapByID_Handler,
		},
		{
			MethodName: "CreateProductSpecValueMap",
			Handler:    _LocalServices_CreateProductSpecValueMap_Handler,
		},
		{
			MethodName: "UpdateProductSpecValueMap",
			Handler:    _LocalServices_UpdateProductSpecValueMap_Handler,
		},
		{
			MethodName: "DeleteProductSpecValueMap",
			Handler:    _LocalServices_DeleteProductSpecValueMap_Handler,
		},
		{
			MethodName: "GetTxFulfillments",
			Handler:    _LocalServices_GetTxFulfillments_Handler,
		},
		{
			MethodName: "GetTxFulfillmentById",
			Handler:    _LocalServices_GetTxFulfillmentById_Handler,
		},
		{
			MethodName: "CreateTxFulfillment",
			Handler:    _LocalServices_CreateTxFulfillment_Handler,
		},
		{
			MethodName: "UpdateTxFulfillment",
			Handler:    _LocalServices_UpdateTxFulfillment_Handler,
		},
		{
			MethodName: "GetVendorSubprovinceCoverages",
			Handler:    _LocalServices_GetVendorSubprovinceCoverages_Handler,
		},
		{
			MethodName: "GetVendorSubprovinceCoverageByID",
			Handler:    _LocalServices_GetVendorSubprovinceCoverageByID_Handler,
		},
		{
			MethodName: "CreateVendorSubprovinceCoverage",
			Handler:    _LocalServices_CreateVendorSubprovinceCoverage_Handler,
		},
		{
			MethodName: "UpdateVendorSubprovinceCoverage",
			Handler:    _LocalServices_UpdateVendorSubprovinceCoverage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_7aca6e02c1d5325d) }

var fileDescriptor_service_7aca6e02c1d5325d = []byte{
	// 917 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x58, 0x5b, 0x6f, 0xdb, 0x36,
	0x18, 0xcd, 0x53, 0x30, 0xd0, 0x70, 0x2e, 0x74, 0x2e, 0xb6, 0x73, 0xb1, 0xe3, 0x61, 0x59, 0xf6,
	0xc2, 0x87, 0x0d, 0x7b, 0xd9, 0x5e, 0x86, 0x24, 0x88, 0x11, 0x20, 0x43, 0x82, 0xb8, 0x09, 0x8a,
	0x16, 0x68, 0xc0, 0xc8, 0x6c, 0x60, 0x40, 0xb5, 0x54, 0x91, 0x36, 0xea, 0x9f, 0xda, 0x7f, 0x53,
	0x48, 0x14, 0xef, 0x1f, 0xe5, 0xbe, 0x95, 0xe7, 0x1c, 0x9d, 0x23, 0x7e, 0xdf, 0xc7, 0x8a, 0x0e,
	0x6a, 0x73, 0x56, 0x2c, 0x67, 0x09, 0x23, 0x79, 0x91, 0x89, 0xac, 0xbf, 0x95, 0x17, 0xd9, 0x74,
	0x91, 0x08, 0x5e, 0xaf, 0x3b, 0xf5, 0xfa, 0x25, 0x2f, 0x8c, 0xe8, 0x40, 0x81, 0x3c, 0x67, 0xc9,
	0x0b, 0x67, 0xa2, 0xc6, 0xbb, 0x0e, 0xbe, 0xa4, 0xe9, 0x42, 0x3d, 0xd1, 0xca, 0x8a, 0x29, 0x2b,
	0xea, 0x45, 0x3b, 0xa7, 0xab, 0x2f, 0x6c, 0xae, 0x9e, 0xda, 0x49, 0xa8, 0x60, 0x6f, 0x59, 0x31,
	0x63, 0x2a, 0x74, 0x57, 0x14, 0x74, 0xce, 0x69, 0x22, 0x66, 0xd9, 0x5c, 0xbd, 0x07, 0x2d, 0x18,
	0x7d, 0x49, 0xb2, 0x25, 0x2b, 0xe8, 0x5b, 0xed, 0xfa, 0xe7, 0xf7, 0x01, 0x6a, 0xdf, 0x65, 0x09,
	0x4d, 0x27, 0x72, 0x0f, 0x1c, 0xff, 0x83, 0x5a, 0x63, 0x26, 0x1e, 0xea, 0x3d, 0xe0, 0x0e, 0xb1,
	0x56, 0x8f, 0xec, 0xeb, 0x82, 0x71, 0xd1, 0xdf, 0x73, 0x41, 0x9e, 0x67, 0x73, 0xce, 0x46, 0x1b,
	0xf8, 0x16, 0xed, 0x18, 0xe2, 0x9a, 0x09, 0x3a, 0x4b, 0x71, 0x97, 0xf8, 0x90, 0x72, 0xe9, 0x01,
	0x8c, 0xb6, 0xba, 0x41, 0xdb, 0x86, 0x7d, 0x28, 0x2b, 0x87, 0x0f, 0x89, 0x87, 0x28, 0xa3, 0x6e,
	0x48, 0x68, 0x9f, 0xbf, 0x51, 0x7b, 0xcc, 0xc4, 0x95, 0xae, 0x0f, 0xde, 0x27, 0xce, 0x5a, 0x79,
	0xb4, 0x88, 0xc1, 0x74, 0x7c, 0x0d, 0xad, 0xfe, 0xa7, 0x39, 0x97, 0xf1, 0x36, 0xe2, 0xc4, 0xbb,
	0x84, 0x8e, 0xbf, 0x47, 0xd8, 0x25, 0x2f, 0x57, 0xb7, 0xd7, 0xb8, 0x4f, 0x02, 0x70, 0xaa, 0xdc,
	0x8e, 0x40, 0x4e, 0x1b, 0xde, 0xa1, 0xdd, 0xab, 0x82, 0x51, 0xc1, 0x2c, 0x09, 0xee, 0x91, 0x00,
	0x53, 0x76, 0x7d, 0x88, 0xb2, 0xdd, 0x9e, 0xf2, 0x69, 0xe0, 0x16, 0x60, 0xc6, 0x0d, 0xa0, 0x6c,
	0xb7, 0x6b, 0x96, 0x32, 0xdf, 0x2d, 0xc0, 0x8c, 0x1b, 0x40, 0x69, 0xb7, 0x73, 0xf4, 0xcb, 0x98,
	0x89, 0xfb, 0x72, 0xea, 0xf1, 0x0e, 0x51, 0xff, 0x54, 0xcf, 0x6e, 0x92, 0x6a, 0x39, 0xda, 0x28,
	0x07, 0x56, 0x6e, 0x51, 0x4a, 0x3b, 0xc4, 0x5a, 0x99, 0x81, 0x75, 0x40, 0x6b, 0xca, 0x5a, 0x72,
	0x43, 0xf2, 0x59, 0xb5, 0xf3, 0x6a, 0x35, 0x11, 0x54, 0x2c, 0xb8, 0xbf, 0x73, 0x87, 0xf2, 0xda,
	0x5c, 0x8f, 0xe0, 0x24, 0x67, 0xc9, 0x84, 0x09, 0x2e, 0xdb, 0xec, 0x81, 0x4e, 0x9b, 0x03, 0x4e,
	0x1b, 0xbe, 0x47, 0xfb, 0x01, 0x5f, 0x8d, 0xce, 0x09, 0x81, 0x70, 0x3d, 0x3d, 0xa7, 0x31, 0x5a,
	0x3b, 0x3f, 0xa1, 0x3d, 0x59, 0x0b, 0x57, 0x85, 0x8f, 0x09, 0x04, 0x2b, 0xdf, 0x93, 0x08, 0x6b,
	0xdb, 0xca, 0x02, 0x05, 0xb6, 0x10, 0x6c, 0x6c, 0x61, 0xd6, 0xb6, 0x95, 0x33, 0x12, 0xd8, 0x42,
	0xb0, 0xb1, 0x85, 0xd9, 0xc6, 0xf2, 0x56, 0x87, 0x1c, 0x28, 0xaf, 0x7d, 0xd4, 0x4f, 0x63, 0xb4,
	0x76, 0xa6, 0xa8, 0x0b, 0x49, 0xaa, 0xde, 0x0d, 0x49, 0x84, 0xd2, 0xed, 0x3b, 0x6b, 0x50, 0xe8,
	0x88, 0x4f, 0xe8, 0x10, 0x6a, 0x46, 0x79, 0xd8, 0x06, 0x24, 0xc2, 0xa8, 0x80, 0x61, 0x5c, 0x60,
	0xfb, 0x43, 0x5d, 0x91, 0xfe, 0x11, 0xc6, 0xf8, 0x47, 0x05, 0xb6, 0x3f, 0xd4, 0x1e, 0xe9, 0x1f,
	0x61, 0x8c, 0x7f, 0x54, 0x60, 0xcf, 0x8c, 0x5b, 0xc5, 0xe7, 0xf2, 0x33, 0xca, 0xf1, 0x31, 0x81,
	0x60, 0x33, 0x33, 0x30, 0x6b, 0xbf, 0x36, 0xa0, 0xa8, 0x1a, 0x3b, 0x20, 0x30, 0x33, 0x35, 0xaf,
	0x1d, 0x15, 0x68, 0xff, 0x8f, 0xe8, 0x20, 0xe8, 0x4d, 0xa5, 0xc3, 0xa7, 0x04, 0x26, 0x94, 0xfb,
	0x20, 0xca, 0xdb, 0xe6, 0x41, 0x63, 0x94, 0x39, 0x4c, 0x18, 0xf3, 0x18, 0x6f, 0x9b, 0x07, 0x5d,
	0x51, 0xe6, 0x30, 0x61, 0xcc, 0x63, 0xfc, 0x9a, 0xb2, 0x57, 0x87, 0x15, 0x2c, 0xbb, 0x7d, 0x5c,
	0x87, 0x71, 0x81, 0xf6, 0x7f, 0x43, 0x7d, 0x58, 0x54, 0x75, 0x76, 0x44, 0xa2, 0xa4, 0x6e, 0xee,
	0xaf, 0x8d, 0x1a, 0x1d, 0x34, 0x45, 0x3d, 0xb8, 0x4d, 0xe5, 0xe0, 0x9f, 0x91, 0x28, 0xa7, 0x62,
	0x46, 0x4d, 0x12, 0x3b, 0x05, 0xee, 0x97, 0x4c, 0x89, 0x72, 0x26, 0xa5, 0x41, 0x62, 0xa7, 0xc0,
	0x8d, 0x93, 0x29, 0x51, 0xce, 0xa4, 0x34, 0x48, 0x74, 0xca, 0x7f, 0xa8, 0x5d, 0x6f, 0x59, 0xde,
	0x76, 0xf1, 0x3e, 0x71, 0xd6, 0xca, 0xed, 0xc0, 0x87, 0xb5, 0xc3, 0x23, 0xea, 0x38, 0x54, 0x7d,
	0x27, 0x3d, 0x22, 0x00, 0xaa, 0xdc, 0x8e, 0x61, 0x52, 0x7b, 0xfe, 0x8b, 0xb6, 0xca, 0x7e, 0xd7,
	0x2c, 0x15, 0x14, 0x63, 0x62, 0x00, 0xe5, 0xd2, 0x71, 0x30, 0xff, 0x86, 0xec, 0xbc, 0x4d, 0x97,
	0xf8, 0x90, 0x7b, 0x43, 0x8e, 0xbc, 0xc7, 0x04, 0xf5, 0x7c, 0xf6, 0x72, 0xa5, 0x2a, 0x15, 0xf7,
	0xec, 0x07, 0x0c, 0x87, 0x2e, 0x84, 0xf6, 0xfe, 0xd4, 0xb5, 0xc8, 0xc2, 0xfc, 0x6b, 0x91, 0x43,
	0xd9, 0xe5, 0x77, 0x69, 0x55, 0x7e, 0x00, 0x35, 0xe5, 0x07, 0x49, 0xfb, 0x0d, 0xc7, 0x4c, 0xbc,
	0xfb, 0x76, 0xb3, 0x48, 0x3f, 0xcf, 0xd2, 0xb4, 0xd4, 0x70, 0x5c, 0x15, 0xca, 0xc5, 0x9c, 0xfd,
	0xfa, 0x94, 0xf7, 0xad, 0x70, 0xe8, 0xf2, 0xd8, 0xca, 0x6f, 0x45, 0x00, 0x3b, 0xdf, 0x0a, 0x80,
	0x0d, 0xe7, 0xce, 0x11, 0xe9, 0xb9, 0x73, 0x50, 0x7f, 0xee, 0x3c, 0x32, 0x2c, 0xa6, 0xef, 0x09,
	0xa0, 0x7e, 0x31, 0x63, 0x9e, 0x39, 0x3a, 0x19, 0x33, 0xf1, 0xcc, 0xe6, 0xd3, 0xac, 0x98, 0x2c,
	0x5e, 0xf3, 0x22, 0x5b, 0xce, 0xe6, 0x09, 0xbb, 0xaa, 0x7f, 0x24, 0x72, 0xfc, 0x1b, 0x69, 0xe4,
	0x55, 0xce, 0xf9, 0x3a, 0x99, 0x4e, 0x5c, 0xa1, 0x61, 0x93, 0xb4, 0xfa, 0x4f, 0xf7, 0x82, 0xac,
	0x91, 0xe8, 0x46, 0xfc, 0xf1, 0x13, 0x4a, 0x1d, 0xbd, 0x44, 0x03, 0x59, 0xe1, 0xe8, 0x03, 0xf8,
	0x77, 0xb2, 0x46, 0xa1, 0x82, 0x2f, 0xd6, 0x0b, 0xed, 0x5c, 0xd9, 0x85, 0xa6, 0xdc, 0x35, 0x0a,
	0x93, 0xbb, 0x56, 0xa8, 0x72, 0x2f, 0xb7, 0x3f, 0xb4, 0xd3, 0xf2, 0xa7, 0x7d, 0xfd, 0xe7, 0x09,
	0xfe, 0xba, 0x59, 0xfd, 0xe6, 0xff, 0xeb, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xdf, 0xfa,
	0x47, 0xb1, 0x10, 0x00, 0x00,
}
