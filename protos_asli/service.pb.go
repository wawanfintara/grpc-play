// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x53, 0xc5, 0x52, 0x7c,
	0x05, 0x45, 0xf9, 0x29, 0xa5, 0xc9, 0x25, 0xc5, 0x10, 0x71, 0x29, 0x81, 0xe4, 0xc4, 0x92, 0xd4,
	0xf4, 0xfc, 0xa2, 0xcc, 0x54, 0xa8, 0x88, 0xd1, 0x77, 0x46, 0x2e, 0x5e, 0x9f, 0xfc, 0xe4, 0xc4,
	0x9c, 0x60, 0x88, 0x01, 0xc5, 0x42, 0x1e, 0x5c, 0xdc, 0xee, 0xa9, 0x25, 0x01, 0x50, 0x8d, 0x42,
	0x52, 0x10, 0x85, 0xc5, 0x7a, 0x48, 0x82, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x52, 0xd2,
	0x58, 0xe5, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x95, 0x18, 0x84, 0xc2, 0xb9, 0x04, 0x10, 0x12,
	0x2e, 0xa9, 0x25, 0x89, 0x99, 0x39, 0x42, 0xf2, 0x98, 0x5a, 0x20, 0x32, 0x30, 0x33, 0x15, 0x70,
	0x2b, 0x80, 0x1b, 0xec, 0xcc, 0xc5, 0xeb, 0x9e, 0x5a, 0xe2, 0x0c, 0xf7, 0x8b, 0x90, 0x0c, 0x92,
	0x26, 0x84, 0x30, 0xcc, 0x48, 0x21, 0x98, 0x2c, 0x42, 0x4a, 0x89, 0x21, 0x09, 0x12, 0x46, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0xc3, 0xa5, 0x33, 0x3b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LocalServicesClient is the client API for LocalServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocalServicesClient interface {
	GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error)
	GetProductDetail(ctx context.Context, in *GetProductDetailRequest, opts ...grpc.CallOption) (*GetProductDetailResponse, error)
	GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*Categories, error)
}

type localServicesClient struct {
	cc *grpc.ClientConn
}

func NewLocalServicesClient(cc *grpc.ClientConn) LocalServicesClient {
	return &localServicesClient{cc}
}

func (c *localServicesClient) GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	out := new(GetProductsResponse)
	err := c.cc.Invoke(ctx, "/protos.LocalServices/GetProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetProductDetail(ctx context.Context, in *GetProductDetailRequest, opts ...grpc.CallOption) (*GetProductDetailResponse, error) {
	out := new(GetProductDetailResponse)
	err := c.cc.Invoke(ctx, "/protos.LocalServices/GetProductDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localServicesClient) GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*Categories, error) {
	out := new(Categories)
	err := c.cc.Invoke(ctx, "/protos.LocalServices/GetCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalServicesServer is the server API for LocalServices service.
type LocalServicesServer interface {
	GetProducts(context.Context, *GetProductsRequest) (*GetProductsResponse, error)
	GetProductDetail(context.Context, *GetProductDetailRequest) (*GetProductDetailResponse, error)
	GetCategories(context.Context, *GetCategoriesRequest) (*Categories, error)
}

// UnimplementedLocalServicesServer can be embedded to have forward compatible implementations.
type UnimplementedLocalServicesServer struct {
}

func (*UnimplementedLocalServicesServer) GetProducts(ctx context.Context, req *GetProductsRequest) (*GetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (*UnimplementedLocalServicesServer) GetProductDetail(ctx context.Context, req *GetProductDetailRequest) (*GetProductDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductDetail not implemented")
}
func (*UnimplementedLocalServicesServer) GetCategories(ctx context.Context, req *GetCategoriesRequest) (*Categories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}

func RegisterLocalServicesServer(s *grpc.Server, srv LocalServicesServer) {
	s.RegisterService(&_LocalServices_serviceDesc, srv)
}

func _LocalServices_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.LocalServices/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetProducts(ctx, req.(*GetProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.LocalServices/GetProductDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetProductDetail(ctx, req.(*GetProductDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalServices_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServicesServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.LocalServices/GetCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServicesServer).GetCategories(ctx, req.(*GetCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocalServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.LocalServices",
	HandlerType: (*LocalServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProducts",
			Handler:    _LocalServices_GetProducts_Handler,
		},
		{
			MethodName: "GetProductDetail",
			Handler:    _LocalServices_GetProductDetail_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _LocalServices_GetCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
